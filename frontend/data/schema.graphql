schema {
  query: BreweriesQuery
  mutation: Mutation
}

# The cost directives is used to express the complexity of a field.
directive @cost(
  # Defines the complexity of the field.
  complexity: Int! = 1
  # Defines field arguments that act as complexity multipliers.
  multipliers: [MultiplierPath!]
) on FIELD_DEFINITION
directive @authorize(
  # The name of the authorization policy that determines access to the annotated resource.
  policy: String
  # Roles that are allowed to access to the annotated resource.
  roles: [String!]
) on OBJECT | FIELD_DEFINITION
type BreweriesQuery {
  breweries(
    after: String
    before: String
    # filter by brewery id
    brewery_id: String
    # search by city name
    city: String
    first: PaginationAmount
    last: PaginationAmount
    # search by brewery name
    name: String
    # general search
    search: String
    # sort by
    sort: [String] = []
    # filter by state
    state: String
    # filter by tags
    tags: [String] = []
    # filter by type
    type: String
  ): BreweryConnection
  node(id: ID!): Node
}

# A brewery of beer
type Brewery implements Node {
  # Friendly id for Brewery
  brewery_id: String!
  # Type of Brewery
  brewery_type: String!
  # The city of the brewery
  city: String
  # The country of origin for the brewery
  country: String
  createdAt: DateTime!
  id: ID!
  # Latitude portion of lat/long coordinates
  latitude: Decimal
  # Longitude portion of lat/long coordinates
  longitude: Decimal
  # Name of brewery
  name: String!
  # The phone number for the brewery
  phone: String
  # The state of the brewery
  postal_code: String
  # The state of the brewery
  state: String
  # The street of the brewery
  street: String
  # Tags that have been attached to the brewery
  tag_list: [String]!
  # Date timestamp of the last time the record was updated
  updated_at: DateTime!
  # Website address for the brewery
  website_url: String
}

# A connection to a list of items.
type BreweryConnection {
  # A list of edges.
  edges: [BreweryEdge!]
  # A flattened list of the nodes.
  nodes: [Brewery]
  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int!
}

# An edge in a connection.
type BreweryEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Brewery
}

input CreateBreweryInput {
  brewery_id: String!
  # Type of Brewery
  brewery_type: String!
  # The city of the brewery
  city: String
  # Relay Client Mutation Id
  clientMutationId: String!
  # The country of origin for the brewery
  country: String
  # Latitude portion of lat/long coordinates
  latitude: Decimal
  # Longitude portion of lat/long coordinates
  longitude: Decimal
  # Name of brewery
  name: String!
  # The phone number for the brewery
  phone: String
  # The postal code of the brewery
  postal_code: String
  # The state of the brewery
  state: String!
  # The street of the brewery
  street: String
  # Tags that have been attached to the brewery
  tag_list: [String]
  # Website address for the brewery
  website_url: String
}

type CreateBreweryPayload {
  brewery: Brewery
  # Relay Client Mutation Id
  clientMutationId: String!
  errors: [UserError]
}

# The `DateTime` scalar represents
 an ISO-8601 compliant date time type.
scalar DateTime

# The built-in `Decimal` scalar type
.
scalar Decimal

# The multiplier path scalar represents
 a valid GraphQL multiplier path string.
scalar MultiplierPath

type Mutation {
  createBrewery(input: CreateBreweryInput): CreateBreweryPayload
  updateBrewery(input: UpdateBreweryInput): UpdateBreweryPayload
}

# The node interface is implemented by entities that have a global unique identifier.
interface Node {
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String
  # Indicates whether more edges exist following the set defined by the clients arguments.
  hasNextPage: Boolean!
  # Indicates whether more edges exist prior the set defined by the clients arguments.
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
}

scalar PaginationAmount

input UpdateBreweryInput {
  brewery_id: String!
  # Type of Brewery
  brewery_type: String!
  # The city of the brewery
  city: String
  # Relay Client Mutation Id
  clientMutationId: String!
  # The country of origin for the brewery
  country: String
  id: ID!
  # Latitude portion of lat/long coordinates
  latitude: Decimal
  # Longitude portion of lat/long coordinates
  longitude: Decimal
  # Name of brewery
  name: String!
  # The phone number for the brewery
  phone: String
  # The postal code of the brewery
  postal_code: String
  # The state of the brewery
  state: String!
  # The street of the brewery
  street: String
  # Tags that have been attached to the brewery
  tag_list: [String]
  # Website address for the brewery
  website_url: String
}

type UpdateBreweryPayload {
  brewery: Brewery
  # Relay Client Mutation Id
  clientMutationId: String!
  errors: [UserError]
}

type UserError {
  code: String
  message: String
}

