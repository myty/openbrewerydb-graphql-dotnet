schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

"A brewery of beer"
type Brewery implements Node {
  id: ID!
  nearby("limit the nearby breweries to search radius, defaults to 25 milles" within: Int): [Brewery]
  "Type of Brewery"
  brewery_type: String!
  "Friendly id for Brewery"
  brewery_id: String!
  "The city of the brewery"
  city: String
  "The country of origin for the brewery"
  country: String
  "Longitude portion of lat\/long coordinates"
  longitude: Decimal
  "Latitude portion of lat\/long coordinates"
  latitude: Decimal
  "Name of brewery"
  name: String!
  "The phone number for the brewery"
  phone: String
  "The state of the brewery"
  postal_code: String
  "The state of the brewery"
  state: String
  "The street of the brewery"
  street: String
  "Tags that have been attached to the brewery"
  tag_list: [String]!
  reviews: [Review]
  "Date timestamp of the last time the record was updated"
  updated_at: DateTime!
  "Website address for the brewery"
  website_url: String
  createdAt: DateTime!
  favoriteUsers: [Favorite]
}

"A connection to a list of items."
type BreweryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BreweryEdge!]
  "A flattened list of the nodes."
  nodes: [Brewery]
  totalCount: Int!
}

"An edge in a connection."
type BreweryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Brewery
}

type CreateBreweryPayload {
  brewery: Brewery
  errors: [UserError]
  "Relay Client Mutation Id"
  clientMutationId: String!
}

type CreateUserPayload {
  user: User
  "Relay Client Mutation Id"
  clientMutationId: String!
}

type Favorite {
  id: Long!
  breweryId: Long!
  brewery: Brewery
  userId: Long!
  user: User
}

type LoginPayload {
  me: User
  token: String
  scheme: String
  "Relay Client Mutation Id"
  clientMutationId: String!
}

type Mutation {
  createUser(input: CreateUserInput): CreateUserPayload
  login(input: LoginInput): LoginPayload
  createBrewery(input: CreateBreweryInput): CreateBreweryPayload
  updateBrewery(input: UpdateBreweryInput): UpdateBreweryPayload
  createReview(input: ReviewInput): ReviewPayload
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  node(id: ID!): Node
  breweries(first: Int after: String last: Int before: String "filter by brewery id" brewery_id: String "filter by state" state: String "filter by type" type: String "search by city name" city: String "search by brewery name" name: String "general search" search: String "sort by" sort: [String] "filter by tags" tags: [String]): BreweryConnection
  breweryById("filter by brewery id" brewery_id: String): Brewery
  nearbyBreweries(first: Int after: String last: Int before: String latitude: Float! longitude: Float!): BreweryConnection
}

type Review {
  id: Long!
  breweryId: Long!
  brewery: Brewery
  subject: String
  body: String
  createdOn: DateTime!
}

type ReviewPayload {
  review: Review
  "Relay Client Mutation Id"
  clientMutationId: String!
}

type Subscription {
  onReviewReceived: Review
}

type UpdateBreweryPayload {
  brewery: Brewery
  errors: [UserError]
  "Relay Client Mutation Id"
  clientMutationId: String!
}

type User {
  id: Long!
  firstName: String
  lastName: String
  email: String
  passwordHash: String
  salt: String
  favorites: [Favorite]
  fullName: String
}

type UserError {
  message: String
  code: String
}

input CreateBreweryInput {
  "Name of brewery"
  name: String!
  "Type of Brewery"
  brewery_type: String!
  brewery_id: String!
  "The street of the brewery"
  street: String
  "The city of the brewery"
  city: String
  "The state of the brewery"
  state: String!
  "The postal code of the brewery"
  postal_code: String
  "Website address for the brewery"
  website_url: String
  "The phone number for the brewery"
  phone: String
  "The country of origin for the brewery"
  country: String
  "Longitude portion of lat\/long coordinates"
  longitude: Decimal
  "Latitude portion of lat\/long coordinates"
  latitude: Decimal
  "Tags that have been attached to the brewery"
  tag_list: [String]
  "Relay Client Mutation Id"
  clientMutationId: String!
}

input CreateUserInput {
  email: String
  firstName: String
  lastName: String
  password: String
  "Relay Client Mutation Id"
  clientMutationId: String!
}

input LoginInput {
  email: String
  password: String
  "Relay Client Mutation Id"
  clientMutationId: String!
}

input ReviewInput {
  subject: String!
  body: String!
  breweryId: ID!
  "Relay Client Mutation Id"
  clientMutationId: String!
}

input UpdateBreweryInput {
  id: ID!
  "Name of brewery"
  name: String!
  "Type of Brewery"
  brewery_type: String!
  brewery_id: String!
  "The street of the brewery"
  street: String
  "The city of the brewery"
  city: String
  "The state of the brewery"
  state: String!
  "The postal code of the brewery"
  postal_code: String
  "Website address for the brewery"
  website_url: String
  "The phone number for the brewery"
  phone: String
  "The country of origin for the brewery"
  country: String
  "Longitude portion of lat\/long coordinates"
  longitude: Decimal
  "Latitude portion of lat\/long coordinates"
  latitude: Decimal
  "Tags that have been attached to the brewery"
  tag_list: [String]
  "Relay Client Mutation Id"
  clientMutationId: String!
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The built-in `Decimal` scalar type."
scalar Decimal

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long
