schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

"A brewery of beer"
type Brewery implements Node {
  id: ID!
  nearby("limit the nearby breweries to search radius, defaults to 25 milles" within: Int): [Brewery]
  "Type of Brewery"
  brewery_type: String!
  "Friendly id for Brewery"
  brewery_id: String!
  "The city of the brewery"
  city: String
  "The country of origin for the brewery"
  country: String
  "Longitude portion of lat\/long coordinates"
  longitude: Decimal
  "Latitude portion of lat\/long coordinates"
  latitude: Decimal
  "Name of brewery"
  name: String!
  "The phone number for the brewery"
  phone: String
  "The state of the brewery"
  postal_code: String
  "The state of the brewery"
  state: String
  "The street of the brewery"
  street: String
  "Tags that have been attached to the brewery"
  tag_list: [String]!
  "Date timestamp of the last time the record was updated"
  updated_at: DateTime!
  "Website address for the brewery"
  website_url: String
  createdAt: DateTime!
  favoriteUsers: [Favorite]
  breweryReviews: [Review]
}

"A connection to a list of items."
type BreweryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BreweryEdge!]
  "A flattened list of the nodes."
  nodes: [Brewery]
  totalCount: Int!
}

"An edge in a connection."
type BreweryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Brewery
}

type CreateBreweryPayload {
  brewery: Brewery
  errors: [UserError]
  "Relay Client Mutation Id"
  clientMutationId: String!
}

type CreateUserPayload {
  user: User
  "Relay Client Mutation Id"
  clientMutationId: String!
}

type Favorite {
  id: Long!
  breweryId: Long!
  brewery: Brewery
  userId: Long!
  user: User
}

type LoginPayload {
  me: User
  token: String
  scheme: String
  "Relay Client Mutation Id"
  clientMutationId: String!
}

type Mutation {
  createUser(input: CreateUserInput): CreateUserPayload
  login(input: LoginInput): LoginPayload
  createBrewery(input: CreateBreweryInput): CreateBreweryPayload
  updateBrewery(input: UpdateBreweryInput): UpdateBreweryPayload
  createReview(input: ReviewInput): ReviewPayload
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  node(id: ID!): Node
  breweries(first: Int after: String last: Int before: String "filter by brewery id" brewery_id: String "filter by state" state: String "filter by type" type: String "search by city name" city: String "search by brewery name" name: String "general search" search: String "sort by" sort: [String] "filter by tags" tags: [String]): BreweryConnection
  breweryById("filter by brewery id" brewery_id: String): Brewery
  nearbyBreweries(first: Int after: String last: Int before: String latitude: Float! longitude: Float!): BreweryConnection
}

type Review {
  id: Long!
  breweryId: Long!
  brewery: Brewery
  subject: String
  body: String
  createdOn: DateTime!
}

type ReviewPayload {
  review: Review
  "Relay Client Mutation Id"
  clientMutationId: String!
}

type Subscription {
  onReviewReceived: Review
}

type UpdateBreweryPayload {
  brewery: Brewery
  errors: [UserError]
  "Relay Client Mutation Id"
  clientMutationId: String!
}

type User {
  id: Long!
  firstName: String
  lastName: String
  email: String
  passwordHash: String
  salt: String
  favorites: [Favorite]
  fullName: String
}

type UserError {
  message: String
  code: String
}

input CreateBreweryInput {
  "Name of brewery"
  name: String!
  "Type of Brewery"
  brewery_type: String!
  brewery_id: String!
  "The street of the brewery"
  street: String
  "The city of the brewery"
  city: String
  "The state of the brewery"
  state: String!
  "The postal code of the brewery"
  postal_code: String
  "Website address for the brewery"
  website_url: String
  "The phone number for the brewery"
  phone: String
  "The country of origin for the brewery"
  country: String
  "Longitude portion of lat\/long coordinates"
  longitude: Decimal
  "Latitude portion of lat\/long coordinates"
  latitude: Decimal
  "Tags that have been attached to the brewery"
  tag_list: [String]
  "Relay Client Mutation Id"
  clientMutationId: String!
}

input CreateUserInput {
  email: String
  firstName: String
  lastName: String
  password: String
  "Relay Client Mutation Id"
  clientMutationId: String!
}

input LoginInput {
  email: String
  password: String
  "Relay Client Mutation Id"
  clientMutationId: String!
}

input ReviewInput {
  subject: String!
  body: String!
  breweryId: ID!
  "Relay Client Mutation Id"
  clientMutationId: String!
}

input UpdateBreweryInput {
  id: ID!
  "Name of brewery"
  name: String!
  "Type of Brewery"
  brewery_type: String!
  brewery_id: String!
  "The street of the brewery"
  street: String
  "The city of the brewery"
  city: String
  "The state of the brewery"
  state: String!
  "The postal code of the brewery"
  postal_code: String
  "Website address for the brewery"
  website_url: String
  "The phone number for the brewery"
  phone: String
  "The country of origin for the brewery"
  country: String
  "Longitude portion of lat\/long coordinates"
  longitude: Decimal
  "Latitude portion of lat\/long coordinates"
  latitude: Decimal
  "Tags that have been attached to the brewery"
  tag_list: [String]
  "Relay Client Mutation Id"
  clientMutationId: String!
}

"The `Boolean` scalar type represents `true` or `false`."
scalar Boolean

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The built-in `Decimal` scalar type."
scalar Decimal

"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http:\/\/en.wikipedia.org\/wiki\/IEEE_floating_point)."
scalar Float

"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID."
scalar ID

"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."
scalar Int

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
scalar String
